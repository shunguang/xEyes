1.3 multi-threading basics

1.3.0
	A. Sequential vs parallel computing
	https://researchcomputingservices.github.io/parallel-computing/01-parallel-introduction/
	https://leonardoaraujosantos.gitbook.io/opencl/performance
	
	B. Latency

		1) Sequential: 
		
		Capture Image(10ms) -> Debayer and Pyamid(5ms) -> Object Detection(20ms) -> Stablization(25ms)-> Display(1ms)
		or	
		Capture Image(10ms) -> Debayer and Pyamid(5ms)  -> Stablization(25ms) -> Object Detection(20ms)-> Display(1ms)
			
		total process time per frame: 10+5+20+25+1 = 51ms
		Latency: from image captured to displayed:  51ms
		
		2) Parallel: 
														   Object Detection(20ms) 
		 Capture Image(10ms) -> Debayer and Pyamid(5ms)	->|                       | -> Display(1ms)
		                                                   Stablization(25ms)
 		 total process time per frame: 10+5+25+1 = 31ms
  		 Latency: from image captured to displayed:  31ms
			
		3)Cost of Parallel
		
1.3.1 Understanding concurrent programming	
	A. https://www.educative.io/blog/modern-multithreading-and-concurrency-in-cpp
	B. https://www.educative.io/blog/top-five-concurrency-interview-questions-for-software-engineers
	
1.3.2 Thread safe FIFO queue
     look at libUtil/FifoQ.h
	 
1.3.3 Thread safe Circular queue
	 Review your example

1.3.4 A simple producer-consumer example
	 A. functions to be executed in thread
		A.1. producer()     //infinit loop to create data
		A.2. Consumer()		//infinit loop to consume data
		A.3. Start()		//start to run threads
		A.4. quit()			//stop running threads, and quit
		
     B. Thread creation
		How to create a thread in std?
		what does thread join mean?
		
	 C. Implementtaion 
		
		C.0 Class prototype
	    
		class Pc{
			Pc( pass paramers ){}
	
			void producer();
			void consumer();
			
			void start();           //starting run the two thread
			void quit();			   //quit both thread	
		
			private:  
				//parameters to run an object of this class
				int  nVevSz; 
				int  nQueSize;
				float64 gauMean, gauStd;  
				//your Circular Que
				...	
		};
	 
	    C.1 Create a circular queue which will be shared by two threads: the producer and consumer ones. 
		    And the element of the queue is an m x 1 1D  gaussian distributed random varaible with mean=1.0 
			and std=2;
		     
		C.2 Create a producer function  which creates data and pushes into the ciccular queue in a inifinite loop
		
		C.3 Create a consumer function  which read data  from the the queue and manipulated (compute mean and std)
    		it in a inifinite loop
			
		C.4 In the main function
            a) create the queue object and init  it 
            b) create thread A to run the producer function
            c) create thread B to run the consumer function
			d) then join thread A and B
	 D. Test
        D.1  Add some sleep time in the loops of C.2 and C.3
		D.2. Play the sleep time parameters to see the the following three scenarios: 
		     a) perfect case: no data drop in the wirtten thread, which means every element in the queque is processed by the consumer thread 
		     b) Data drop:    written is fater than the read
			 c). consumer thread wakeup too frequent (How to avoid this).
 		D.3. Try to change the 1d-vector size and # of items in the queque to test the upper bundaries of your machine.	What are these numbers?
		
	         
	  
	  