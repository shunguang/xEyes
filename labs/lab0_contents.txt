C++ Engineering: Build a multi-camera security system
Shunguang Wu 5/23/2020 


Ch1 Background refreshment
1.1 Setting working environment
      1.1.1 Windows
      1.1.2. Linux
      1.1.3. Future extension to iOS and Android
1.2 Crossing platform project organization
      1.2.1 Source code organization
      1.2.2 Build in windows  by visual studio
      1.2.3 Build in linux  by makefiles      
1.3 multi-threading basics
      1.3.1 understanding concurrent programming
      1.3.2 Thread safe FIFO queue
      1.3.3 Thread safe Circular queue
      1.3.4 A simple producer-consumer example
 1.4 Summary    
 
Ch2 System overview 
2.1 framework overview
2.2 Video Capture
2.3 Threats detection and alarming
2.4 Visualization 
2.5 logging  
2.6 xml configuration
2.7 Summary

 
Ch3. Video Capture
3.1 Image formats and their conversions
     3.1.1 Bayer
     3.1.2 YUV420
     3.1.3 RGB and RGBA
     3.1.4 Conversions
3.2 Video encoding,  decoding and streaming basics
     3.2.1 Understanding video formats 
     3.2.2 CPU and GPU based H264 Encoding and decoding
     3.2.3 RTSP streaming

3.3 RTSP and ONVIF cameras    
3.4 Gstreamer and FFMPEG
3.5 Capture and save video by gstreamer
3.5 Capture and save video by FFMPEG
3.6 Unit testing
3.7 Summary


Ch4. Threat  detection
4.1 Introduction of object detection in computer vision
     4.1.1 static camera  background subtraction 
     4.1.2 moving camera change detetcion     
4.2 Understanding ML
    4.2.1 Machine learning without brain
    4.2.2 The most simple neural net

4.3 Deep CNN architecture for object detection    
    4.3.1 Object detection classifications
    4.3.2 Understanding Generic object detection frameworks
             a. Region proposal based framework: R-CNN, Fast R-CNN and Faster R-CNN 
             b. Regression/classification based framework: Yolo single shot  
    4.3.3 Pedestrian detection 
    4.3.4 Face detection and recognition
    4.3.5 Event detection and beyound
4.4 Steps to deploy a ML products on embedded systems
4.5 DetectNet in Jetson-inference  
4.6 Transfer learning and fine-tuning with new data.
4.6 Unit Testing 
4.7 Summary


Ch5. Visualization and alarming
5.1  Understanding QT GUI architecture 
5.2  QT menu design
5.3  Main Window, frame and  panel layouts
5.4  Pop-up windows and Parameter panels
5.3  Image display and  mouse events on it
5.5  Alarming and  notifications
      5.5.1 message and Email with detection frame images
      5.5.2 message and Email with short video
      5.5.3 Video relay by RTSP-server       
5.5 Unit testing
5.6 Summary


ch6. Run & Performance evaluations
6.1 Create a system driver
6.2 Build an executable file
      6.1.1 build in Linux
      6.1.2 build in windows
6.3 Configuration and run
      6.2.1 XML  file
      6.2.2 run the system 
6.4 performance evaluations
    6.4.1 CPU usage
    6.4.2 GPU usage
    6.5.3 Bandwidth estimation 
6.5 Summary
=======eof =====